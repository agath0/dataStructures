HEAP

Heap is a complete binary tree(there is no blank space
between elements when represented in the form of an array)
Because Binary heap are implemented using arrays mostly in 
algorithms satisfying anyone of the conditions max heap
or the min heap

Max Heap
Every node should have element greater than or equal to
its descendents

Min Heap
Every node should have element smaller than or equal to
its descendents

Note:

node at index i
leftchild at 2*i
rightchilde ate 2*i+1

As heap is a complete binary tree the height of binary tree
will always be log(n) only,height of tree will not increase
unessarily
So height of heap is also always log(n)
Heap is not used for searching purpose





Inserting in a max heap
since we are inserting elements level by level and since
the height of a tree is  log(n) the time complexity
of inserting in a max heap is also considered as log(n)

void Insert(int A[],int n)//n is the index of the 
			//newly inserted integer
{
int temp,i=n;
temp=A[n];
while(i>1 && temp>>A[i/2])
	{
	A[i]=A[i/2];
	i=i/2;
	}
A[i]=temp;
}

	


Creating a heap for a given set of elements
When creation is happening inside the same array
we call it as in-place heap creation
Initialy all the elements will be given simply 
in an array and then we apply the above insert 
function on each element one by one and will form
a heap when it reaches the last element

void createHeap()
{
	int a[]={1,10,20,30,25,5,40,35};
	int i;
	for(i=2;i<=7;i++)
	{
		Insert(A,i);
	}
}
Time complexity for creating a heap with n elements
is nlog(n)


Creating a min heap
The same above steps can be followed with
temp<A[i/2] can be done for creating min heap


Deleting from Heap
Note: from heap you can only delete root element
that is the root largest element in max heap
For this to happen perfectly that is you have to 
rearrange the heap after deletion of the root element
To do that you should initialy place the las element
of the heap when represented in array format as the
root element , then compare the chlilderen of the root
and replace the root element with the larger element 
among the children and then repeat this 

void Delete(int A[],int n)
{
	int x,i,j;
	x=A[n];
	A[1]=A[n]
	i=1,j=2*i;
	while(j<n-1)
	{
	if(A[j+1]>A[j])
		j=j+1;
	if(A[i]<A[j])
	{
	 	swap(A[i],A[j]);
		i=j;
		j=2*j;
	}
	else
       		 break;
	}
	A[n]=x;
}

As you go on deleting the elements from an array you get
free space at the end of the array and we use that free space 
for storing the deleted elements and so the elements will be
getting arranged from the last element onwards in descending
order and finaly they will be in ascending order from left hand
side onwards

Heap sort
-create heap of n elements
 this takes nlog(n) time
-delete all the elements and they get sorted
 this takes nlog(n) time
So total 2nlog(n)=O(nlog(n))

